{"version":3,"sources":["components/Logo/london-eye.png","components/FaceRecognition/FaceRecognition.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","FaceRecognition","imageUrl","box","className","id","alt","src","width","heigh","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Logo","options","max","height","paddingTop","logo","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","loadUser","data","setState","user","name","email","entries","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","console","log","route","isSignedIn","this","params","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.926dc734.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/london-eye.ab967ba0.png\";","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ imageUrl, box }) => {\n  return (\n    <div className='center ma'>\n      <div className='absolute mt2'>\n        <img id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/>\n        <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default FaceRecognition;","import React from \"react\";\nimport Tilt from \"react-tilt\";\nimport logo from \"./london-eye.png\";\nimport \"./Logo.css\";\n\nconst Logo = () => {\n  return (\n    <div className=\"ma4 mt0\">\n      <Tilt\n        className=\"Tilt br2\"\n        options={{ max: 55 }}\n        style={{ height: 100, width: 150 }}\n      >\n        <div className=\"Tilt-inner\">\n          <img\n            className=\"icon\"\n            style={{ paddingTop: \"1px\" }}\n            alt=\"logo\"\n            src={logo}\n          />\n        </div>\n      </Tilt>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\nimport \"./ImageLinkForm.css\";\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\n  return (\n    <div>\n      <p className=\"f3\">\n        {\"This Magic Eye will detect faces in your pictures. Give it a try.\"}\n      </p>\n      <div className=\"center\">\n        <div className=\"form center pa4 br3 shadow-5\">\n          <input\n            className=\"f4 pa2 w-70 center\"\n            type=\"tex\"\n            onChange={onInputChange}\n          />\n          <button\n            className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\"\n            onClick={onButtonSubmit}\n          >\n            Detect\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageLinkForm;\n","import React, { Component } from \"react\";\nimport Particles from \"react-particles-js\";\nimport Clarifai from \"clarifai\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport \"./App.css\";\n\n//You must add your own API key here from Clarifai.\nconst app = new Clarifai.App({\n  apiKey: \"acf674ba3a434130b2f490535265f8f2\"\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n      route: \"signin\",\n      isSignedIn: false,\n      user: {\n        id: \"\",\n        name: \"\",\n        email: \"\",\n        entries: 0,\n        joined: \"\"\n      }\n    };\n  }\n\n  loadUser = data => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined\n      }\n    });\n  };\n\n  calculateFaceLocation = data => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height\n    };\n  };\n\n  displayFaceBox = box => {\n    this.setState({ box: box });\n  };\n\n  onInputChange = event => {\n    this.setState({ input: event.target.value });\n  };\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then(response => {\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count }));\n            });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { imageUrl, box } = this.state;\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={particlesOptions} />\n        <Logo />\n        <ImageLinkForm\n          onInputChange={this.onInputChange}\n          onButtonSubmit={this.onButtonSubmit}\n        />\n        <FaceRecognition box={box} imageUrl={imageUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}